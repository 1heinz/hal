image: $CI_REGISTRY_IMAGE:latest

stages:
  - build-image
  - release-image
  - compile
  - test
  - deploy

variables:
  GIT_SSL_NO_VERIFY: "1"
  TEST_IMAGE_TAG: $CI_REGISTRY_IMAGE:latest
  RELEASE_IMAGE_TAG: $CI_REGISTRY_IMAGE:latest

cache:
  untracked: true
  paths:
    - ccache/
    - build/

build-image:
   image: docker:latest
   stage: build-image
   script:
     - apk update && apk upgrade && apk add --no-cache bash git openssh
#     - git log --name-only --format="%H" HEAD^..HEAD | grep 'Dockerfile' && echo "change detected" || { echo ”skipping” && exit 0; }
#     - echo ”Change detected”
     - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
     - docker build --pull -t $TEST_IMAGE_TAG .
     - docker push $TEST_IMAGE_TAG

release-image:
  image: docker:latest
  stage: release-image
  script:
    - apk update && apk upgrade && apk add --no-cache bash git openssh
    - git log --name-only --format="%H" HEAD^..HEAD | grep 'Dockerfile' && echo "change detected" || { echo “skipping” && exit 0; }
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $TEST_IMAGE_TAG
    - docker tag $TEST_IMAGE_TAG $RELEASE_IMAGE_TAG
    - docker push $RELEASE_IMAGE_TAG

compile:package:ubuntu:
  stage: compile
  script:
    - rm -rf build
    - mkdir -p build
    - cd build
    - export HAL_BASE_PATH=$(pwd)
    - cmake -G Ninja .. -DCMAKE_BUILD_TYPE=MinSizeRel -DBUILD_ALL_PLUGINS=OFF -DBUILD_TESTS=OFF -DWITH_GUI=ON -DBUILD_DOCUMENTATION=ON -DCMAKE_INSTALL_PREFIX=/usr/
    - export CCACHE_DIR=$(pwd)/../ccache
    - cmake --build . --target package --clean-first -- -j4
    - du -h .
  artifacts:
    paths:
      - build/hal-*.deb
      - build/hal-*.sh
      - build/hal-*.tar.gz
      - build/hal-*.zip
    expire_in: 1 week
  cache:
    key: build-cache-ubuntu
    policy: push
    paths:
      - ccache/
      - build/
  only:
    - master
    - triggers
    - /^v.*$/ #For aptly deployment
    - web #Triggered by run pipeline

compile:test:ubuntu:
  stage: compile
  script:
    - rm -rf build
    - mkdir -p build
    - cd build
    - export HAL_BASE_PATH=$(pwd)
    - cmake -G Ninja .. -DCMAKE_BUILD_TYPE=Debug -DBUILD_ALL_PLUGINS=ON -DBUILD_TESTS=ON -DBUILD_COVERAGE=ON -DWITH_GUI=ON -DBUILD_DOCUMENTATION=ON -DCMAKE_INSTALL_PREFIX=/usr/
    - export CCACHE_DIR=$(pwd)/../ccache
    - cmake --build . --target package --clean-first -- -j4
  artifacts:
    paths:
      - build/hal-*.deb
      - build/hal-*.sh
      - build/hal-*.tar.gz
      - build/hal-*.zip
    expire_in: 1 week
  cache:
    key: test-build-cache-ubuntu
    paths:
    - ccache/
    - build/

compile:package:macos:
  stage: compile
  script:
    - rm -rf build
    - mkdir -p build
    - cd build
    - export HAL_BASE_PATH=$(pwd)
    - cmake -G Ninja .. -DCMAKE_BUILD_TYPE=MinSizeRel -DBUILD_ALL_PLUGINS=OFF -DBUILD_TESTS=OFF -DWITH_GUI=ON -DBUILD_DOCUMENTATION=ON -DCMAKE_INSTALL_PREFIX=/usr/
    - cmake --build . --target package --clean-first -- -j4
    - du -h .
  artifacts:
    paths:
      - build/hal-*.pkg
      - build/hal-*.sh
      - build/hal-*.tar.gz
      - build/hal-*.zip
    expire_in: 1 week
  cache:
    key: build-cache-macos
    policy: push
    paths:
      - ccache/
      - build/
  only:
    - master
    - triggers
    - /^v.*$/ #For aptly deployment
    - web #Triggered by run pipeline
  tags:
    - macOS

compile:test:macos:
  stage: compile
  script:
    - rm -rf build
    - mkdir -p build
    - cd build
    - export HAL_BASE_PATH=$(pwd)
    - cmake -G Ninja .. -DCMAKE_BUILD_TYPE=Debug -DBUILD_ALL_PLUGINS=ON -DBUILD_TESTS=ON -DBUILD_COVERAGE=ON -DWITH_GUI=ON -DBUILD_DOCUMENTATION=ON -DCMAKE_INSTALL_PREFIX=/usr/
    - cmake --build . --target package --clean-first -- -j4
  artifacts:
    paths:
      - build/hal-*.pkg
      - build/hal-*.sh
      - build/hal-*.tar.gz
      - build/hal-*.zip
    expire_in: 1 week
  cache:
    key: test-build-cache-macos
    paths:
      - ccache/
      - build/
  only:
    - master
    - triggers
    - /^mac.*$/ #For mac deployment
    - web #Triggered by run pipeline
    - tags
  tags:
    - macOS

compile:doc:doxygen:
  stage: compile
  script:
    - rm -rf build
    - mkdir -p build
    - cd build
    - export HAL_BASE_PATH=$(pwd)
    - cmake -G Ninja .. -DCMAKE_BUILD_TYPE=Debug -DBUILD_ALL_PLUGINS=ON -DBUILD_TESTS=ON -DBUILD_COVERAGE=ON -DWITH_GUI=ON -DBUILD_DOCUMENTATION=ON -DCMAKE_INSTALL_PREFIX=/usr/
    - cmake --build . --target doc --clean-first -- -j4
  artifacts:
    paths:
      - build/documentation/*
    expire_in: 1 week
  cache:
    key: doc-build-cache
    paths:
      - ccache/
      - build/
  only:
    - master
    - triggers
    - /^mac.*$/ #For mac deployment
    - web #Triggered by run pipeline
    - tags

test:ubuntu:
  stage: test
  script:
    - rm -rf build
    - mkdir -p build
    - cd build
    - export HAL_BASE_PATH=$(pwd)
    - cmake -G Ninja .. -DCMAKE_BUILD_TYPE=Debug -DBUILD_ALL_PLUGINS=ON -DBUILD_TESTS=ON -DBUILD_COVERAGE=ON -DWITH_GUI=ON -DBUILD_DOCUMENTATION=ON -DCMAKE_INSTALL_PREFIX=/usr/
    - export CCACHE_DIR=$(pwd)/../ccache
    - cmake --build . --target all --clean-first -- -j4
    - ninja hal_coverage
  artifacts:
    paths:
      - build/gtestresult*
      - build/hal_coverage.xml
      - build/hal_coverage/*
    expire_in: 1 week
  dependencies:
    - compile:test:ubuntu
  cache:
    key: test-build-cache-ubuntu
    policy: pull
    paths:
      - ccache/
      - build/
  coverage: '/^\s*Total:\|(-|[\d.]*%?)\s*[\d\w]+\s*\|\s*(?:-|[\d.]*%?)\s*[\d\w]+\s*\|\s*(?:-|[\d.]*%?)\s*[\d\w]+\s*$/'

test:macos:
  stage: test
  script:
    - rm -rf build
    - mkdir -p build
    - cd build
    - export HAL_BASE_PATH=$(pwd)
    - cmake -G Ninja .. -DCMAKE_BUILD_TYPE=MinSizeRel -DBUILD_ALL_PLUGINS=ON -DBUILD_TESTS=ON -DBUILD_COVERAGE=ON -DWITH_GUI=ON -DBUILD_DOCUMENTATION=ON -DCMAKE_INSTALL_PREFIX=/usr/
    - cmake --build . --target all --clean-first -- -j4
    - ninja hal_coverage
  artifacts:
    paths:
      - build/gtestresult*
      - build/hal_coverage.xml
      - build/hal_coverage/*
    expire_in: 1 week
  dependencies:
    - compile:test:macos
  cache:
    key: test-build-cache-macos
    policy: pull
    paths:
      - ccache/
      - build/
  coverage: '/^\s*Total:\|(-|[\d.]*%?)\s*[\d\w]+\s*\|\s*(?:-|[\d.]*%?)\s*[\d\w]+\s*\|\s*(?:-|[\d.]*%?)\s*[\d\w]+\s*$/'
  only:
    - master
    - triggers
    - /^mac.*$/ #For mac deployment
    - web #Triggered by run pipeline
    - tags
  tags:
    - macOS

test:package:ubuntu:
  stage: test
  image: ubuntu:latest
  dependencies:
    - compile:package:ubuntu
  cache: {}
  only:
    - master
    - triggers
    - /^v.*$/ #For aptly deployment
    - web #Triggered by run pipeline
  script:
    - apt update
    - dpkg --force-all -i build/hal*.deb
    - apt-get install -f -y
    - hal --version
    - apt-get purge -y hal-reverse
    - apt autoremove -y

test:check-core-documentation:
  stage: test
  script:
    - python3 tools/check_documentation.py include/ -ignore include/gui/
  cache: {}

deploy-aptly:
  stage: deploy
  only:
    - /^v.*$/
  except:
    - branches
  script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - ssh-add <(echo "$HAL_DEPLOYMENT_KEY")
    - 'ssh-keyscan fs.emsec.rub.de > ~/.ssh/known_hosts'
    - ssh -p8999 root@hal.emsec.rub.de rm -rf /aptly/debs/*.deb
    - scp -P8999 -r build/hal-*.deb root@hal.emsec.rub.de:/aptly/debs/
    - ssh -p8999 root@hal.emsec.rub.de aptly repo add hal /aptly/debs/
    - ssh -p8999 root@hal.emsec.rub.de aptly snapshot create hal-$CI_COMMIT_TAG from repo hal
    - ssh -p8999 root@hal.emsec.rub.de aptly publish switch -batch=true -passphrase=$HAL_GPG_PASSPHRASE bionic hal-$CI_COMMIT_TAG
    - ssh -p8999 root@hal.emsec.rub.de rm -rf /aptly/debs/*.deb
  dependencies:
    - compile:package:ubuntu
  cache:
    key: build-cache-ubuntu

deploy-doc:
  stage: deploy
  only:
    - /^v.*$/
  except:
    - branches
  script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - ssh-add <(echo "$HAL_DEPLOYMENT_KEY")
    - 'ssh-keyscan fs.emsec.rub.de > ~/.ssh/known_hosts'
    - cd build/documentation/
    - tar cvfz documentation.tgz --strip-components=1 html
    - ssh  $HAL_DOCUMENTATION_SERVERrm -rf /srv/data/doc-server/data/*
    - scp -r documentation.tgz sw@hal.emsec.rub.de:/srv/data/doc-server/data/
    - ssh  $HAL_DOCUMENTATION_SERVERtar xvfz /srv/data/doc-server/data/documentation.tgz -C /srv/data/doc-server/data/
    - ssh  $HAL_DOCUMENTATION_SERVERmv /srv/data/doc-server/data/html/* /srv/data/doc-server/data/
    - ssh  $HAL_DOCUMENTATION_SERVERrm -f /srv/data/doc-server/data/documentation.tgz
  dependencies:
    - compile:doc:doxygen
  cache:
    key: doc-build-cache